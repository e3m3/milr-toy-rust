// COM: Errors ported from pytorch interactive session; Uses currently unsupported `ones(_)`
// XFAIL: *

// RUN:     @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,3,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_00
//CHECK_00: Is type '<3,2,3>'

// RUN:     @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,3,3,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_01
//CHECK_01: Is type '<3,3,2,3>'

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,3,2,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_02
//CHECK_02: Expected size for first two dimensions of batch2 tensor to be: <9,3> but got: <9,2>

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,3,1,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_06
//CHECK_06: Expected size for first two dimensions of batch2 tensor to be: <9,3> but got: <9,1>

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([9,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_08
//CHECK_08: mat1 and mat2 shapes cannot be multiplied (6x3 and 9x3)

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([9,1,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_09
//CHECK_09: The size of tensor a (3) must match the size of tensor b (9) at non-singleton dimension 0

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([9,2,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_10
//CHECK_10: The size of tensor a (3) must match the size of tensor b (9) at non-singleton dimension 0

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([9,3,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_12
//CHECK_12: The size of tensor a (3) must match the size of tensor b (9) at non-singleton dimension 0

// RUN:     @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([1,3,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_13
//CHECK_13: Is type '<3,2,3>'

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([2,3,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_14
//CHECK_14: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 0

// RUN:     @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,3,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_15
//CHECK_15: Is type '<3,2,3>'

// RUN:     @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([1,3,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_16
//CHECK_16: Is type '<3,2,3>'

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([1,1,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_17
//CHECK_17: Expected size for first two dimensions of batch2 tensor to be: <3,3> but got: <3,1>

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,1,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_18
//CHECK_18: Expected size for first two dimensions of batch2 tensor to be: <3,3> but got: <3,1>

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,2,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_19
//CHECK_19: Expected size for first two dimensions of batch2 tensor to be: <3,3> but got: <3,2>

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,2,2,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_20
//CHECK_20: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 1

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,3,2,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_21
//CHECK_21: Expected size for first two dimensions of batch2 tensor to be: <9,3> but got: <9,2>

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,3,3,2,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_22
//CHECK_22: Expected size for first two dimensions of batch2 tensor to be: <27,3> but got: <27,2>

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,3,4,2,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_23
//CHECK_23: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 2

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,2,3]) .* ones([3,3,3,2,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_24
//CHECK_24: Expected size for first two dimensions of batch2 tensor to be: <27,3> but got: <27,2>

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,1,3]) .* ones([3,3,3,2,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_25
//CHECK_25: Expected size for first two dimensions of batch2 tensor to be: <27,3> but got: <27,2>

// RUN:     @mlpc -v=sem --sem -e "def test() { return ones([3,1,3]) .* ones([3,3,3,3,3]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_26
//CHECK_26: Is type '<3,3,3,1,3>'

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([3,1,3]) .* ones([3,3,3,2,2]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_27
//CHECK_27: Expected size for first two dimensions of batch2 tensor to be: <27,3> but got: <27,2>

// RUN:     @mlpc -v=sem --sem -e "def test() { return ones([3,1,3]) .* ones([3,3,3,3,2]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_28
//CHECK_28: Is type '<3,3,3,1,2>'

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([2,1,3]) .* ones([3,3,3,3,2]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_29
//CHECK_29: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 2

// RUN:     @mlpc -v=sem --sem -e "def test() { return ones([3,1,3]) .* ones([3,3,3,3,2]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_30
//CHECK_30: Is type '<3,3,3,1,2>'

// RUN:     @mlpc -v=sem --sem -e "def test() { return ones([3,1,3]) .* ones([13,3,3,3,2]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_31
//CHECK_31: Is type '<13,3,3,1,2>'

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([2,1,3]) .* ones([13,3,3,3,2]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_32
//CHECK_32: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 2

// RUN: not @mlpc -v=sem --sem -e "def test() { return ones([2,1,3]) .* ones([13,2,3,3,2]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_33
//CHECK_33: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 2

// RUN:     @mlpc -v=sem --sem -e "def test() { return ones([2,1,3]) .* ones([13,3,2,3,2]); }" 2>&1 | @filecheck %s --check-prefix=CHECK_34
//CHECK_34: Is type '<13,3,2,1,2>'
