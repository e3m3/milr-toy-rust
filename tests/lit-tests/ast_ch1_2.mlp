// RUN: @mlpc --ast --parse %s 2>&1 | @filecheck %s
// COM: See original source at 'https://mlir.llvm.org/docs/Tutorials/Toy/Ch-1/'

def main() {
    // Define a variable `a` with shape <2, 3>, initialized with the literal value.
    // The shape is inferred from the supplied literal.
    var a = [[1, 2, 3], [4, 5, 6]];

    // b is identical to a, the literal tensor is implicitly reshaped: defining new
    // variables is the way to reshape tensors (element count must match).
    var b<2, 3> = [1, 2, 3, 4, 5, 6];

    // transpose() and print() are the only builtin, the following will transpose
    // a and b, printing the results.
    print(transpose(a));
    print(transpose(b));
}

// CHECK:   AST:
// CHECK:   Module '[[SRC_PATH]]':
// CHECK:     Proto 'main' @[[SRC_PATH]]:4:5
// CHECK:     Params: []
// CHECK:     Block {
// CHECK:       VarDecl: a<> @[[SRC_PATH]]:7:5
// CHECK:         Literal: <2,3>[ @[[SRC_PATH]]:7:13
// CHECK:           Literal: <3>[ @[[SRC_PATH]]:7:14
// CHECK:             1, 2, 3
// CHECK:           ] // Literal
// CHECK:           Literal: <3>[ @[[SRC_PATH]]:7:25
// CHECK:             4, 5, 6
// CHECK:           ] // Literal
// CHECK:         ] // Literal
// CHECK:       VarDecl: b<2,3> @[[SRC_PATH]]:11:5
// CHECK:         Literal: <6>[ @[[SRC_PATH]]:11:19
// CHECK:           1, 2, 3, 4, 5, 6
// CHECK:         ] // Literal
// CHECK:       Print: @[[SRC_PATH]]:15:5
// CHECK:         Transpose: @[[SRC_PATH]]:15:11
// CHECK:           Var: a @[[SRC_PATH]]:15:21
// CHECK:       Print: @[[SRC_PATH]]:16:5
// CHECK:         Transpose: @[[SRC_PATH]]:16:11
// CHECK:           Var: b @[[SRC_PATH]]:16:21
// CHECK:     } // Block
