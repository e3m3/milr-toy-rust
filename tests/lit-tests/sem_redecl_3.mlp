// RUN: @mlpc --verbose=sem --sem %s 2>&1 | @filecheck %s

def foo() {
    return 10;
}

def main() {
    print(foo());
    var foo<> = [1, 2, 3];
    print(foo);
}

// CHECK: Running DeclCheck on module '[[SRC_PATH]]'
// CHECK: Added symbol 'foo(_)' to scope
// CHECK: Found symbol 'print(_)' in scope
// CHECK: Found symbol 'foo(_)' in scope
// CHECK: Added symbol 'foo' to scope
// CHECK: Found symbol 'print(_)' in scope
// CHECK: Found symbol 'foo' in scope
// CHECK: Removed symbol 'foo' from scope
// CHECK: Added symbol 'main(_)' to scope
// CHECK: Removed symbol 'foo(_)' from scope
// CHECK: Removed symbol 'main(_)' from scope

// CHECK: Running TypeCheck on module '[[SRC_PATH]]'
// CHECK: Processing Function 'foo' @[[SRC_PATH]]:3:5
// CHECK: Processing Return @[[SRC_PATH]]:4:5
// CHECK: Processing Number '10' @[[SRC_PATH]]:4:12
// CHECK: Is type 'f64'
// CHECK: Return type is 'f64'
// CHECK: Adding specialization to 'foo(_)' for 'fn(() -> f64)'
// CHECK: Adding symbol 'foo(_)' to AST cache
// CHECK: Processing Function 'main' @[[SRC_PATH]]:7:5
// CHECK: Processing Print @[[SRC_PATH]]:8:5
// CHECK: Processing Call 'foo' @[[SRC_PATH]]:8:11
// CHECK: Found symbol 'foo(_)' in AST cache
// CHECK: Getting specialization from 'foo(_)' for 'fn(() -> f64)'
// CHECK: Is type 'f64'
// CHECK: Adding specialization to 'print(_)' for 'fn(f64 -> ())'
// CHECK: Processing VarDecl 'foo' @[[SRC_PATH]]:9:5
// CHECK: Inferring type for 'foo'
// CHECK: Processing Literal @[[SRC_PATH]]:9:17
// CHECK: Asserting shape is '<3>'
// CHECK: Processing Number '1' @[[SRC_PATH]]:9:18
// CHECK: Is type 'f64'
// CHECK: Processing Number '2' @[[SRC_PATH]]:9:21
// CHECK: Is type 'f64'
// CHECK: Processing Number '3' @[[SRC_PATH]]:9:24
// CHECK: Is type 'f64'
// CHECK: Shape '<3>' for literal is correct
// CHECK: Is type '<3xf64>'
// CHECK: Setting type for 'foo' to '<3xf64>'
// CHECK: Processing Print @[[SRC_PATH]]:10:5
// CHECK: Processing Var 'foo' @[[SRC_PATH]]:10:11
// CHECK: Is type '<3xf64>'
// CHECK: Adding specialization to 'print(_)' for 'fn(<3xf64> -> ())'
// CHECK: Found no terminators
// CHECK: Adding specialization to 'main(_)' for 'fn(() -> ())'
// CHECK: Adding symbol 'main(_)' to AST cache
