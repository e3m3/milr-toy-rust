// RUN: @mlpc --ast --parse %s 2>&1 | @filecheck %s

def test() {
    var a<3,2> = [[1, 2], [3, 4], [5, 6]];
    var b<2,3> = [[1, 2, 3], [4, 5, 6]];
    return a * b;                           // Result returned is of shape <3,3>
}

// CHECK:   AST:
// CHECK:   Module '[[SRC_PATH]]':
// CHECK:     Proto 'test' @[[SRC_PATH]]:3:5
// CHECK:     Params: []
// CHECK:     Block {
// CHECK:       VarDecl: a<3,2> @[[SRC_PATH]]:4:5
// CHECK:         Literal: <3,2>[ @[[SRC_PATH]]:4:18
// CHECK:           Literal: <2>[ @[[SRC_PATH]]:4:19
// CHECK:             1, 2
// CHECK:           ] // Literal
// CHECK:           Literal: <2>[ @[[SRC_PATH]]:4:27
// CHECK:             3, 4
// CHECK:           ] // Literal
// CHECK:           Literal: <2>[ @[[SRC_PATH]]:4:35
// CHECK:             5, 6
// CHECK:           ] // Literal
// CHECK:         ] // Literal
// CHECK:       VarDecl: b<2,3> @[[SRC_PATH]]:5:5
// CHECK:         Literal: <2,3>[ @[[SRC_PATH]]:5:18
// CHECK:           Literal: <3>[ @[[SRC_PATH]]:5:19
// CHECK:             1, 2, 3
// CHECK:           ] // Literal
// CHECK:           Literal: <3>[ @[[SRC_PATH]]:5:30
// CHECK:             4, 5, 6
// CHECK:           ] // Literal
// CHECK:         ] // Literal
// CHECK:       Return: @[[SRC_PATH]]:6:5
// CHECK:         Binop: * @[[SRC_PATH]]:6:14
// CHECK:           Var: a @[[SRC_PATH]]:6:12
// CHECK:           Var: b @[[SRC_PATH]]:6:16
// CHECK:     } // Block
