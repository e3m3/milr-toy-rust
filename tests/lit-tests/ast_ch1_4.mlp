// RUN: @mlpc --ast --parse %s 2>&1 | @filecheck %s
// COM: See original source at 'https://mlir.llvm.org/docs/Tutorials/Toy/Ch-1/'

// User defined generic function that operates on unknown shaped arguments.
def multiply_transpose(a, b) {
    return transpose(a) * transpose(b);
}

def main() {
    // Define a variable `a` with shape <2, 3>, initialized with the literal value.
    var a = [[1, 2, 3], [4, 5, 6]];
    var b<2, 3> = [1, 2, 3, 4, 5, 6];

    // This call will specialize `multiply_transpose` with <2, 3> for both
    // arguments and deduce a return type of <3, 2> in initialization of `c`.
    var c = multiply_transpose(a, b);

    // A second call to `multiply_transpose` with <2, 3> for both arguments will
    // reuse the previously specialized and inferred version and return <3, 2>.
    var d = multiply_transpose(b, a);

    // A new call with <3, 2> (instead of <2, 3>) for both dimensions will
    // trigger another specialization of `multiply_transpose`.
    var e = multiply_transpose(c, d);
}

// CHECK: AST:
// CHECK: Module '[[SRC_PATH]]':
// CHECK:   Proto 'multiply_transpose' @[[SRC_PATH]]:5:5
// CHECK:     Params: [a,b]
// CHECK:     Block {
// CHECK:       Return: @[[SRC_PATH]]:6:5
// CHECK:         Binop: * @[[SRC_PATH]]:6:25
// CHECK:           Transpose: @[[SRC_PATH]]:6:12
// CHECK:             Var: a @[[SRC_PATH]]:6:22
// CHECK:           Transpose: @[[SRC_PATH]]:6:27
// CHECK:             Var: b @[[SRC_PATH]]:6:37
// CHECK:     } // Block
// CHECK:   Proto 'main' @[[SRC_PATH]]:9:5
// CHECK:     Params: []
// CHECK:     Block {
// CHECK:       VarDecl: a<> @[[SRC_PATH]]:11:5
// CHECK:         Literal: <2,3>[ @[[SRC_PATH]]:11:13
// CHECK:           Literal: <3>[ @[[SRC_PATH]]:11:14
// CHECK:             1, 2, 3
// CHECK:           ] // Literal
// CHECK:           Literal: <3>[ @[[SRC_PATH]]:11:25
// CHECK:             4, 5, 6
// CHECK:           ] // Literal
// CHECK:         ] // Literal
// CHECK:       VarDecl: b<2,3> @[[SRC_PATH]]:12:5
// CHECK:         Literal: <6>[ @[[SRC_PATH]]:12:19
// CHECK:           1, 2, 3, 4, 5, 6
// CHECK:         ] // Literal
// CHECK:       VarDecl: c<> @[[SRC_PATH]]:16:5
// CHECK:         Call 'multiply_transpose': @[[SRC_PATH]]:16:13
// CHECK:           Var: a @[[SRC_PATH]]:16:32
// CHECK:           Var: b @[[SRC_PATH]]:16:35
// CHECK:       VarDecl: d<> @[[SRC_PATH]]:20:5
// CHECK:         Call 'multiply_transpose': @[[SRC_PATH]]:20:13
// CHECK:           Var: b @[[SRC_PATH]]:20:32
// CHECK:           Var: a @[[SRC_PATH]]:20:35
// CHECK:       VarDecl: e<> @[[SRC_PATH]]:24:5
// CHECK:         Call 'multiply_transpose': @[[SRC_PATH]]:24:13
// CHECK:           Var: c @[[SRC_PATH]]:24:32
// CHECK:           Var: d @[[SRC_PATH]]:24:35
// CHECK:     } // Block

