// RUN: @mlpc --ast --parse -e "def test() { return; }"            2>&1 | @filecheck %s
// RUN: @mlpc --ast --parse -e "def test() { return 10; }"         2>&1 | @filecheck %s --check-prefixes=CHECK,CHECK_A
// RUN: @mlpc --ast --parse -e "def test() { return -10; }"        2>&1 | @filecheck %s --check-prefixes=CHECK,CHECK_B
// RUN: @mlpc --ast --parse -e "def test() { return -1.3; }"       2>&1 | @filecheck %s --check-prefixes=CHECK,CHECK_C
// RUN: @mlpc --ast --parse -e "def test() { return 10 - 8 * 3; }" 2>&1 | @filecheck %s --check-prefixes=CHECK,CHECK_D
// RUN: @mlpc --ast --parse -e "def test() { return 10 * 8 - 3; }" 2>&1 | @filecheck %s --check-prefixes=CHECK,CHECK_E

// CHECK:   AST:
// CHECK:   Module 'Stdin':
// CHECK:     Proto 'test' @Stdin:1:5
// CHECK:     Params: []
// CHECK:     Block {
// CHECK:       Return: @Stdin:1:14

// CHECK_A:       10

// CHECK_B:       Binop: - @Stdin:1:21
// CHECK_B:         0
// CHECK_B:         10

// CHECK_C:       Binop: - @Stdin:1:21
// CHECK_C:         0
// CHECK_C:         1.3

// CHECK_D:       Binop: - @Stdin:1:24
// CHECK_D:         10
// CHECK_D:         Binop: * @Stdin:1:28
// CHECK_D:           8
// CHECK_D:           3

// CHECK_E:       Binop: - @Stdin:1:28
// CHECK_E:         Binop: * @Stdin:1:24
// CHECK_E:           10
// CHECK_E:           8
// CHECK_E:         3
