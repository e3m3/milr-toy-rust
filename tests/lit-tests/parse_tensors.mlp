// RUN:     @mlpc --verbose=parser --parse -e "def test() { var a<> = [1]; }"          2>&1 | @filecheck %s --check-prefixes=CHECK,CHECK_A
// RUN:     @mlpc --verbose=parser --parse -e "def test() { var a<1> = [1]; }"         2>&1 | @filecheck %s --check-prefixes=CHECK,CHECK_B
// RUN:     @mlpc --verbose=parser --parse -e "def test() { var a<1,3> = [[1,2,3]]; }" 2>&1 | @filecheck %s --check-prefixes=CHECK,CHECK_C
// RUN: not @mlpc --verbose=parser --parse -e "def test() { var a<0> = [1]; }"         2>&1 | @filecheck %s --check-prefixes=CHECK,CHECK_D
// RUN: not @mlpc --verbose=parser --parse -e "def test() { var a<0x1> = [1]; }"       2>&1 | @filecheck %s --check-prefixes=CHECK,CHECK_E

// CHECK:   Consumed expected token 'Def:def' at position '0'
// CHECK:   Consumed expected token 'Ident:test' at position '1'
// CHECK:   Consumed expected token 'ParenL:(' at position '2'
// CHECK:   Consumed expected token 'ParenR:)' at position '3'
// CHECK:   Consumed expected token 'BraceL:{' at position '4'
// CHECK:   Consumed expected token 'Var:var' at position '5'
// CHECK:   Consumed expected token 'Ident:a' at position '6'
// CHECK:   Consumed expected token 'AngleL:<' at position '7'

// CHECK_A: Consumed expected token 'AngleR:>' at position '8'
// CHECK_A: Consumed expected token 'Assign:=' at position '9'
// CHECK_A: Consumed expected token 'BracketL:[' at position '10'
// CHECK_A: Consumed expected token 'Number:1' at position '11'
// CHECK_A: Consumed expected token 'BracketR:]' at position '12'
// CHECK_A: Consumed expected token 'Semicolon:;' at position '13'
// CHECK_A: Consumed expected token 'BraceR:}' at position '14'
// CHECK_A: Consumed expected token 'Eoi:' at position '15'

// CHECK_B: Consumed expected token 'Number:1' at position '8'
// CHECK_B: Consumed expected token 'AngleR:>' at position '9'
// CHECK_B: Consumed expected token 'Assign:=' at position '10'
// CHECK_B: Consumed expected token 'BracketL:[' at position '11'
// CHECK_B: Consumed expected token 'Number:1' at position '12'
// CHECK_B: Consumed expected token 'BracketR:]' at position '13'
// CHECK_B: Consumed expected token 'Semicolon:;' at position '14'
// CHECK_B: Consumed expected token 'BraceR:}' at position '15'
// CHECK_B: Consumed expected token 'Eoi:' at position '16'

// CHECK_C: Consumed expected token 'Number:1' at position '8'
// CHECK_C: Consumed expected token 'Comma:,' at position '9'
// CHECK_C: Consumed expected token 'Number:3' at position '10'
// CHECK_C: Consumed expected token 'AngleR:>' at position '11'
// CHECK_C: Consumed expected token 'Assign:=' at position '12'
// CHECK_C: Consumed expected token 'BracketL:[' at position '13'
// CHECK_C: Consumed expected token 'BracketL:[' at position '14'
// CHECK_C: Consumed expected token 'Number:1' at position '15'
// CHECK_C: Consumed expected token 'Comma:,' at position '16'
// CHECK_C: Consumed expected token 'Number:2' at position '17'
// CHECK_C: Consumed expected token 'Comma:,' at position '18'
// CHECK_C: Consumed expected token 'Number:3' at position '19'
// CHECK_C: Consumed expected token 'BracketR:]' at position '20'
// CHECK_C: Consumed expected token 'BracketR:]' at position '21'
// CHECK_C: Consumed expected token 'Semicolon:;' at position '22'
// CHECK_C: Consumed expected token 'BraceR:}' at position '23'
// CHECK_C: Consumed expected token 'Eoi:' at position '24'

// CHECK_D: Consumed expected token 'Number:0' at position '8'
// CHECK_D: Dimensions must be positive integers: 0

// CHECK_E: Consumed expected token 'Number:0x1' at position '8'
// CHECK_E: Hexadecimal dimensions are illegal: 0x1
