// RUN: @mlpc --verbose=sem --sem %s 2>&1 | @filecheck %s
// COM: See original source at 'https://mlir.llvm.org/docs/Tutorials/Toy/Ch-1/'

def main() {
    // Define a variable `a` with shape <2, 3>, initialized with the literal value.
    // The shape is inferred from the supplied literal.
    var a = [[1, 2, 3], [4, 5, 6]];

    // b is identical to a, the literal tensor is implicitly reshaped: defining new
    // variables is the way to reshape tensors (element count must match).
    var b<2, 3> = [1, 2, 3, 4, 5, 6];

    // transpose() and print() are the only builtin, the following will transpose
    // a and b, printing the results.
    print(transpose(a));
    print(transpose(b));
}

// CHECK: Running DeclCheck on module '[[SRC_PATH]]'
// CHECK: Added symbol 'a' to scope
// CHECK: Added symbol 'b' to scope
// CHECK: Found symbol 'print(_)' in scope
// CHECK: Found symbol 'transpose(_)' in scope
// CHECK: Found symbol 'a' in scope
// CHECK: Found symbol 'print(_)' in scope
// CHECK: Found symbol 'transpose(_)' in scope
// CHECK: Found symbol 'b' in scope
// CHECK: Removed symbol 'a' from scope
// CHECK: Removed symbol 'b' from scope
// CHECK: Added symbol 'main(_)' to scope
// CHECK: Removed symbol 'main(_)' from scope

// CHECK: Running TypeCheck on module '[[SRC_PATH]]'
// CHECK: Processing Function 'main' @[[SRC_PATH]]:4:5
// CHECK: Processing VarDecl 'a' @[[SRC_PATH]]:7:5
// CHECK: Inferring type for 'a'
// CHECK: Processing Literal @[[SRC_PATH]]:7:13
// CHECK: Asserting shape is '<2,3>'
// CHECK: Processing Literal @[[SRC_PATH]]:7:14
// CHECK: Asserting shape is '<3>'
// CHECK: Processing Number '1' @[[SRC_PATH]]:7:15
// CHECK: Is type 'f64'
// CHECK: Processing Number '2' @[[SRC_PATH]]:7:18
// CHECK: Is type 'f64'
// CHECK: Processing Number '3' @[[SRC_PATH]]:7:21
// CHECK: Is type 'f64'
// CHECK: Shape '<3>' for literal is correct
// CHECK: Is type '<3xf64>'
// CHECK: Processing Literal @[[SRC_PATH]]:7:25
// CHECK: Asserting shape is '<3>'
// CHECK: Processing Number '4' @[[SRC_PATH]]:7:26
// CHECK: Is type 'f64'
// CHECK: Processing Number '5' @[[SRC_PATH]]:7:29
// CHECK: Is type 'f64'
// CHECK: Processing Number '6' @[[SRC_PATH]]:7:32
// CHECK: Is type 'f64'
// CHECK: Shape '<3>' for literal is correct
// CHECK: Is type '<3xf64>'
// CHECK: Shape '<2,3>' for literal is correct
// CHECK: Setting type for 'a' to '<2x3xf64>'
// CHECK: Processing VarDecl 'b' @[[SRC_PATH]]:11:5
// CHECK: Asserting shape is '<2,3>'
// CHECK: Processing Literal @[[SRC_PATH]]:11:19
// CHECK: Asserting shape is '<6>'
// CHECK: Processing Number '1' @[[SRC_PATH]]:11:20
// CHECK: Is type 'f64'
// CHECK: Processing Number '2' @[[SRC_PATH]]:11:23
// CHECK: Is type 'f64'
// CHECK: Processing Number '3' @[[SRC_PATH]]:11:26
// CHECK: Is type 'f64'
// CHECK: Processing Number '4' @[[SRC_PATH]]:11:29
// CHECK: Is type 'f64'
// CHECK: Processing Number '5' @[[SRC_PATH]]:11:32
// CHECK: Is type 'f64'
// CHECK: Processing Number '6' @[[SRC_PATH]]:11:35
// CHECK: Is type 'f64'
// CHECK: Shape '<6>' for literal is correct
// CHECK: Is type '<6xf64>'
// CHECK: Shape '<2,3>' for 'b' is correct
// CHECK: Setting type for 'b' to '<2x3xf64>'
// CHECK: Processing Print @[[SRC_PATH]]:15:5
// CHECK: Processing Transpose @[[SRC_PATH]]:15:11
// CHECK: Processing Var 'a' @[[SRC_PATH]]:15:21
// CHECK: Is type '<2x3xf64>'
// CHECK: Adding specialization to 'transpose(_)' for 'fn(<2x3xf64> -> <3x2xf64>)'
// CHECK: Is type '<3x2xf64>'
// CHECK: Adding specialization to 'print(_)' for 'fn(<3x2xf64> -> ())'
// CHECK: Processing Print @[[SRC_PATH]]:16:5
// CHECK: Processing Transpose @[[SRC_PATH]]:16:11
// CHECK: Processing Var 'b' @[[SRC_PATH]]:16:21
// CHECK: Is type '<2x3xf64>'
// CHECK: Adding specialization to 'transpose(_)' for 'fn(<2x3xf64> -> <3x2xf64>)'
// CHECK: Is type '<3x2xf64>'
// CHECK: Adding specialization to 'print(_)' for 'fn(<3x2xf64> -> ())'
// CHECK: Found no terminators
// CHECK: Adding specialization to 'main(_)' for 'fn(() -> ())'
// CHECK: Adding symbol 'main(_)' to AST cache
