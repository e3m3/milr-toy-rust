// RUN: @mlpc --ast --parse %s 2>&1 | @filecheck %s
// COM: See original source at 'https://mlir.llvm.org/docs/Tutorials/Toy/Ch-1/'

// User defined generic function that operates on unknown shaped arguments.
def multiply_transpose(a, b) {
  return transpose(a) * transpose(b);
}

def main() {
  // Define a variable `a` with shape <2, 3>, initialized with the literal value.
  var a = [[1, 2, 3], [4, 5, 6]];
  var b<2, 3> = [1, 2, 3, 4, 5, 6];

  // This call will specialize `multiply_transpose` with <2, 3> for both
  // arguments and deduce a return type of <3, 2> in initialization of `c`.
  var c = multiply_transpose(a, b);

  // A second call to `multiply_transpose` with <2, 3> for both arguments will
  // reuse the previously specialized and inferred version and return <3, 2>.
  var d = multiply_transpose(b, a);

  // A new call with <3, 2> (instead of <2, 3>) for both dimensions will
  // trigger another specialization of `multiply_transpose`.
  var e = multiply_transpose(c, d);

  // Finally, calling into `multiply_transpose` with incompatible shapes
  // (<2, 3> and <3, 2>) will trigger a shape inference error.
  var f = multiply_transpose(a, c);
}

// CHECK: AST:
// CHECK: Module '[[PATH:.*]][[MOD:ast_ch1_3\.mlp]]':
// CHECK:   Proto 'multiply_transpose' @[[PATH]][[MOD]]:5:1
// CHECK:     Params: [a,b]
// CHECK:     Block {
// CHECK:       Return: @[[PATH]][[MOD]]:6:3
// CHECK:         Binop: * @[[PATH]][[MOD]]:6:23
// CHECK:           Transpose: @[[PATH]][[MOD]]:6:10
// CHECK:             Var: a @[[PATH]][[MOD]]:6:20
// CHECK:           Transpose: @[[PATH]][[MOD]]:6:25
// CHECK:             Var: b @[[PATH]][[MOD]]:6:35
// CHECK:     } // Block
// CHECK:   Proto 'main' @[[PATH]][[MOD]]:9:1
// CHECK:     Params: []
// CHECK:     Block {
// CHECK:       VarDecl: a<> @[[PATH]][[MOD]]:11:3
// CHECK:         Literal: <2,3>[ @[[PATH]][[MOD]]:11:11
// CHECK:           Literal: <3>[ @[[PATH]][[MOD]]:11:12
// CHECK:             1, 2, 3
// CHECK:           ] // Literal
// CHECK:           Literal: <3>[ @[[PATH]][[MOD]]:11:23
// CHECK:             4, 5, 6
// CHECK:           ] // Literal
// CHECK:         ] // Literal
// CHECK:       VarDecl: b<2,3> @[[PATH]][[MOD]]:12:3
// CHECK:         Literal: <6>[ @[[PATH]][[MOD]]:12:17
// CHECK:           1, 2, 3, 4, 5, 6
// CHECK:         ] // Literal
// CHECK:       VarDecl: c<> @[[PATH]][[MOD]]:16:3
// CHECK:         Call 'multiply_transpose': @[[PATH]][[MOD]]:16:11
// CHECK:           Var: a @[[PATH]][[MOD]]:16:30
// CHECK:           Var: b @[[PATH]][[MOD]]:16:33
// CHECK:       VarDecl: d<> @[[PATH]][[MOD]]:20:3
// CHECK:         Call 'multiply_transpose': @[[PATH]][[MOD]]:20:11
// CHECK:           Var: b @[[PATH]][[MOD]]:20:30
// CHECK:           Var: a @[[PATH]][[MOD]]:20:33
// CHECK:       VarDecl: e<> @[[PATH]][[MOD]]:24:3
// CHECK:         Call 'multiply_transpose': @[[PATH]][[MOD]]:24:11
// CHECK:           Var: c @[[PATH]][[MOD]]:24:30
// CHECK:           Var: d @[[PATH]][[MOD]]:24:33
// CHECK:       VarDecl: f<> @[[PATH]][[MOD]]:28:3
// CHECK:         Call 'multiply_transpose': @[[PATH]][[MOD]]:28:11
// CHECK:           Var: a @[[PATH]][[MOD]]:28:30
// CHECK:           Var: c @[[PATH]][[MOD]]:28:33
// CHECK:     } // Block
