// RUN: @mlpc --verbose=sem --sem %s 2>&1 | @filecheck %s
// COM: See original source at 'https://mlir.llvm.org/docs/Tutorials/Toy/Ch-1/'

def main() {
  // Define a variable `a` with shape <2, 3>, initialized with the literal value.
  // The shape is inferred from the supplied literal.
  var a = [[1, 2, 3], [4, 5, 6]];

  // b is identical to a, the literal tensor is implicitly reshaped: defining new
  // variables is the way to reshape tensors (element count must match).
  var b<2, 3> = [1, 2, 3, 4, 5, 6];

  // transpose() and print() are the only builtin, the following will transpose
  // a and b and perform an element-wise multiplication before printing the result.
  print(transpose(a) * transpose(b));
}

// CHECK: Running DeclCheck on module '[[SRC_PATH]]'
// CHECK: Added symbol 'a' to scope
// CHECK: Added symbol 'b' to scope
// CHECK: Found symbol 'print' in scope
// CHECK: Found symbol 'transpose' in scope
// CHECK: Found symbol 'a' in scope
// CHECK: Found symbol 'transpose' in scope
// CHECK: Found symbol 'b' in scope
// CHECK: Removed symbol 'a' from scope
// CHECK: Removed symbol 'b' from scope
// CHECK: Added symbol 'main' to scope
// CHECK: Removed symbol 'main' from scope

// CHECK: Running TypeCheck on module '[[SRC_PATH]]'
