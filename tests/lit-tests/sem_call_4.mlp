// RUN: @mlpc --verbose=sem --sem %s 2>&1 | @filecheck %s

def foo(a) {
    return a;
}

def test() {
    var b<> = [1, 2];
    return foo(b);
}

// CHECK: Running DeclCheck on module '[[SRC_PATH]]'
// CHECK: Added symbol 'a' to scope
// CHECK: Found symbol 'a' in scope
// CHECK: Removed symbol 'a' from scope
// CHECK: Added symbol 'foo(_)' to scope
// CHECK: Added symbol 'b' to scope
// CHECK: Found symbol 'foo(_)' in scope
// CHECK: Found symbol 'b' in scope
// CHECK: Removed symbol 'b' from scope
// CHECK: Added symbol 'test(_)' to scope
// CHECK: Removed symbol 'foo(_)' from scope
// CHECK: Removed symbol 'test(_)' from scope

// CHECK: Running TypeCheck on module '[[SRC_PATH]]'
// CHECK: Processing Function 'foo' @[[SRC_PATH]]:3:5
// CHECK: Found parameter 'a' @[[SRC_PATH]]:3:9
// CHECK: Processing Return @[[SRC_PATH]]:4:5
// CHECK: Processing Var 'a' @[[SRC_PATH]]:4:12
// CHECK: Is type 'undef'
// CHECK: Return type is 'undef'
// CHECK: Adding specialization to 'foo(_)' for 'fn(undef -> undef)'
// CHECK: Adding symbol 'foo(_)' to AST cache
// CHECK: Processing Function 'test' @[[SRC_PATH]]:7:5
// CHECK: Processing VarDecl 'b' @[[SRC_PATH]]:8:5
// CHECK: Inferring type for 'b'
// CHECK: Processing Literal @[[SRC_PATH]]:8:15
// CHECK: Asserting shape is '<2>'
// CHECK: Processing Number '1' @[[SRC_PATH]]:8:
// CHECK: Is type 'f64'
// CHECK: Processing Number '2' @[[SRC_PATH]]:8:
// CHECK: Is type 'f64'
// CHECK: Shape '<2>' for literal is correct
// CHECK: Is type '<2xf64>'
// CHECK: Setting type for 'b' to '<2xf64>'
// CHECK: Processing Return @[[SRC_PATH]]:9:5
// CHECK: Processing Call 'foo' @[[SRC_PATH]]:9:12
// CHECK: Found symbol 'foo(_)' in AST cache
// CHECK: Processing Var 'b' @[[SRC_PATH]]:9:16
// CHECK: Is type '<2xf64>'
// CHECK: Getting specialization from 'foo(_)' for 'fn(undef -> undef)'
// CHECK: Type for 'foo(_)' is underspecified
// CHECK: Processing Function 'foo' @[[SRC_PATH]]:3:5
// CHECK: Found parameter 'a' with type '<2xf64>' @[[SRC_PATH]]:3:9
// CHECK: Processing Return @[[SRC_PATH]]:4:5
// CHECK: Processing Var 'a' @[[SRC_PATH]]:4:12
// CHECK: Is type '<2xf64>'
// CHECK: Return type is '<2xf64>'
// CHECK: Adding specialization to 'foo(_)' for 'fn(<2xf64> -> <2xf64>)'
// CHECK: Is type '<2xf64>'
// CHECK: Return type is '<2xf64>'
// CHECK: Adding specialization to 'test(_)' for 'fn(() -> <2xf64>)'
// CHECK: Adding symbol 'test(_)' to AST cache
