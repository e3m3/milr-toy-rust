import os
import lit.formats

config.name = "mlp"
config.suffixes = [".mlp"]

config.substitutions.append(("@clang", "clang"))
config.substitutions.append(("@mlpc", "mlpc"))
config.substitutions.append(("@count", "wc"))
config.substitutions.append(("@diff", "diff"))
config.substitutions.append(("@filecheck", "FileCheck --color --vv --dump-input=fail"))
config.substitutions.append(("@head", "head"))
config.substitutions.append(("@llc", "llc"))
config.substitutions.append(("@lld", "lld"))
config.substitutions.append(("@llvm-as", "llvm-as"))
config.substitutions.append(("@llvm-dis", "llvm-dis"))
config.substitutions.append(("@llvm-opt", "opt"))
config.substitutions.append(("@tail", "tail"))
config.substitutions.append(("@tee", "tee"))

if "OS_NAME" in lit_config.params:
    os_name = lit_config.params["OS_NAME"]
    if os_name == "linux":
        config.available_features.add("OS_LINUX")
    elif os_name == "macos":
        config.available_features.add("OS_MACOS")
    elif os_name == "windows":
        config.available_features.add("OS_WINDOWS")
    else:
        config.available_features.add("OS_UNKNOWN")
else:
    config.available_features.add("OS_UNKNOWN")

if "ARCH" in lit_config.params:
    arch = lit_config.params["ARCH"]
    if arch == "x86":
        config.available_features.add("ARCH_X86")
    elif arch == "x86_64":
        config.available_features.add("ARCH_X86_64")
    elif arch == "aarch64":
        config.available_features.add("ARCH_AARCH64")
    else:
        config.available_features.add("ARCH_UNKNOWN")
else:
    config.available_features.add("ARCH_UNKNOWN")

print(f'Features configured: {", ".join([f for f in config.available_features])}\n')

config.test_format = lit.formats.ShTest(False)
config.test_source_root = os.path.dirname(__file__)

## Clear existing temporary files in test 'Output' directory
output_dir_root = os.path.join(config.test_source_root, "Output")
if os.path.exists(output_dir_root) and os.path.isdir(output_dir_root):
    existing_files = [f for f in os.listdir(output_dir_root) if os.path.isfile(os.path.join(output_dir_root, f))]
    for f in existing_files:
        print(f"Found existing temporary file '{f}' in 'Output': Deleting.\n")
        os.remove(os.path.join(output_dir_root, f))
    del existing_files
del output_dir_root

print(f"Done configuring lit configuration '{config.name}' at '{__file__}'\n")
